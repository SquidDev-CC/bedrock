export const convertMouseButton = (btn: number): number | undefined => {
  switch (btn) {
    case 0: return 1; // Left
    case 1: return 3; // Middle
    case 2: return 2; // Right
    default: return undefined;
  }
};

export const convertMouseButtons = (btn: number): number | undefined => {
  if ((btn & 1) !== 0) return 1; // Left
  if ((btn & 2) !== 0) return 2; // Right
  if ((btn & 4) !== 0) return 3; // Middle
  return undefined;
};

/**
 * Mapping of KeyboardEvent.code and KeyboardEvent.key
 *
 * @see https://www.w3.org/TR/uievents-key/
 * @see https://www.w3.org/TR/uievents-code/
 */
const keyboardCodes: number[] = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, // 15
  0x2a, 0x1d, 0x38, 0xc5, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 31
  0x39, 0xc9, 0xd1, 0xcf, 0xc7, 0xcb, 0xc8, 0xcd, 0xd0, 0x00, 0x00, 0x00, 0x00, 0xd2, 0xd3, 0x00, // 47
  0x0b, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x27, 0x00, 0x0d, 0x00, 0x00, // 63
  0x00, 0x1e, 0x30, 0x2e, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18, // 79
  0x19, 0x10, 0x13, 0x1f, 0x14, 0x16, 0x2f, 0x11, 0x2d, 0x15, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, // 95
  0x52, 0x4f, 0x50, 0x51, 0x4b, 0x4c, 0x4d, 0x47, 0x48, 0x49, 0x37, 0x4e, 0x00, 0x4a, 0x53, 0xb5, // 111
  0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58, 0x00, 0x00, 0x00, 0x00, // 127
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 143
  0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 159
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, // 175
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x0d, 0x33, 0x0c, 0x34, 0x35, // 191
  0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 207
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x2b, 0x1b, 0x00, 0x00, // 223
];
export const convertKey = (key: number): number | undefined => keyboardCodes[key];

// UK keyboard is far better :p. Note, we start with ) as this works 0..9, rather than 1..90
const shiftLine = `)!"Â£$%^&*(`;

export const convertChar = (key: number, shift: boolean): string | undefined => {
  // Letters, numbers, and baisc numpad
  if (key >= 0x41 && key <= 0x5a) return String.fromCharCode(key + (shift ? 0 : 32));
  if (key >= 0x30 && key <= 0x39) return shift ? shiftLine.charAt(key - 48) : String.fromCharCode(key);
  if (key >= 0x60 && key <= 0x69) return String.fromCharCode(key - 0x30);

  switch (key) {
    case 0x20: return " ";
    case 0xA3: return shift ? "~" : "#";
    case 0xBA: return shift ? ":" : ";";
    case 0xBB: return shift ? "+" : "=";
    case 0xBC: return shift ? "<" : ",";
    case 0xBD: return shift ? "_" : "-";
    case 0xBE: return shift ? ">" : ".";
    case 0xBF: return shift ? "?" : "/";
    case 0xDB: return shift ? "{" : "[";
    case 0xDC: return shift ? "|" : "\\";
    case 0xDD: return shift ? "}" : "]";
    case 0xDE: return shift ? "@" : "'";
    // Numpad
    case 0x0C: return "=";
    case 0x61: return "*";
    case 0x6B: return "+";
    case 0x6D: return "-";
    case 0x6E: return ".";
    case 0x6F: return "/";
    case 0xC2: return ",";
    default: return undefined;
  }
};
